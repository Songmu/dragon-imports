package dragon

import (
	"fmt"
	"io"
	"os"
	"path/filepath"
)

func out(libChan chan lib, w io.Writer) error {
	stdlib := map[string]map[string]bool{
		"unsafe": map[string]bool{
			"Alignof":       true,
			"ArbitraryType": true,
			"Offsetof":      true,
			"Pointer":       true,
			"Sizeof":        true,
		},
	}
	for lib := range libChan {
		objMap, ok := stdlib[lib.path]
		if !ok {
			objMap = make(map[string]bool)
		}
		objMap[lib.object] = true
		stdlib[lib.path] = objMap
	}

	_, err := fmt.Fprintf(w, `// AUTO-GENERATED BY dragon-imports

package imports

var stdlib = %#v
`, stdlib)

	return err
}

func outPath() string {
	for _, src := range srcDirs() {
		outPath := filepath.Join(src, "golang.org/x/tools/internal/imports")
		if _, err := os.Stat(outPath); err == nil {
			return outPath
		}
	}
	return ""
}
